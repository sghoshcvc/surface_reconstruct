# Created by the script cgal_create_CMakeLists
# This is the CMake script for compiling a set of CGAL applications.

cmake_minimum_required(VERSION 3.1...3.15)

project( polygon_based )
#add_executable( polygon_surface_reconstruction surface_reconstruction_polygonal.cpp )

# CGAL and its components
find_package( CGAL QUIET COMPONENTS  )

if ( NOT CGAL_FOUND )

  message(STATUS "This project requires the CGAL library, and will not be compiled.")
  return()  

endif()


# Boost and its components
find_package( Boost REQUIRED )

if ( NOT Boost_FOUND )

  message(STATUS "This project requires the Boost library, and will not be compiled.")

  return()  

endif()

include( CGAL_CreateSingleSourceCGALProgram )

find_package(Eigen3 3.1.0) #(requires 3.1.0 or greater)
include(CGAL_Eigen_support)
if(NOT TARGET CGAL::Eigen_support)
  message(STATUS "NOTICE: This project requires Eigen 3.1 (or greater) and will not be compiled.")
  return()
endif()

find_package(SCIP QUIET)
include(CGAL_SCIP_support)
if (NOT TARGET CGAL::SCIP_support )
  find_package( GLPK QUIET)
  include(CGAL_GLPK_support)
  if (NOT TARGET CGAL::GLPK_support )
    message( STATUS "NOTICE: This project requires either SCIP or GLPK, and will not be compiled.")
    return()
  endif()
endif()
# include for local directory

# include for local package
find_package( PCL 1.8 REQUIRED )
# include for local directory
if( PCL_FOUND )
  # [C/C++]>[General]>[Additional Include Directories]
  include_directories( ${PCL_INCLUDE_DIRS} )

  # [C/C++]>[Preprocessor]>[Preprocessor Definitions]
  add_definitions( ${PCL_DEFINITIONS} )
  
  # For Use Not PreCompiled Features 
  #add_definitions( -DPCL_NO_PRECOMPILE )

  # [Linker]>[General]>[Additional Library Directories]
  link_directories( ${PCL_LIBRARY_DIRS} )
endif()

# Creating entries for all C++ files with "main" routine
# ##########################################################


# create_single_source_cgal_program( "cgal_pcl_interface.cpp" )

create_single_source_cgal_program( "surface_reconstruction_polygonal.cpp" )
foreach(target
    surface_reconstruction_polygonal
    )
  target_link_libraries(${target} PUBLIC CGAL::Eigen_support ${PCL_LIBRARIES} )
  if (TARGET CGAL::SCIP_support)
    target_link_libraries(${target} PUBLIC CGAL::SCIP_support)
  else()
    target_link_libraries(${target} PUBLIC CGAL::GLPK_support)
  endif()
endforeach()
#target_link_libraries( polygon_surface_reconstruction ${PCL_LIBRARIES} ${CGAL} CGAL::CGAL_GLPK_support)

